{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack project management dashboard application built with React, Express, and TypeScript. The application allows users to manage projects and their associated pipelines through a clean, modern interface. It features a main dashboard for viewing all projects and detailed project pages for managing individual pipelines. The application uses mock data for development and is designed with a dark theme and professional SaaS-style UI.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React 18** with functional components and hooks for UI state management\n- **Vite** as the build tool and development server for fast hot module replacement\n- **Wouter** for client-side routing (lightweight alternative to React Router)\n- **TanStack Query** for server state management and data fetching\n- **TypeScript** for type safety across the entire frontend codebase\n\n## Styling and UI Components\n- **Tailwind CSS** for utility-first styling with custom CSS variables for theming\n- **Shadcn/ui** component library built on Radix UI primitives for accessible, customizable components\n- **Dark theme** implementation using CSS custom properties\n- **Responsive design** with mobile-first approach using Tailwind breakpoints\n\n## Backend Architecture\n- **Express.js** server with TypeScript for API endpoints\n- **ESM modules** throughout the codebase for modern JavaScript support\n- **Middleware setup** for JSON parsing, URL encoding, and request logging\n- **Error handling** middleware for centralized error management\n- **Development/production** environment detection for conditional middleware\n\n## Data Management\n- **Drizzle ORM** configured for PostgreSQL database interactions\n- **Zod schemas** for runtime validation and type inference\n- **Database schema** includes Users, Projects, and Pipelines tables with proper relationships\n- **Mock data** system for development using in-memory storage interface\n- **Type-safe** database operations with full TypeScript integration\n\n## Development Tools and Configuration\n- **TSConfig** with path mapping for clean imports (@/, @shared/, @assets/)\n- **ESBuild** for production bundling of server code\n- **Drizzle Kit** for database migrations and schema management\n- **PostCSS** with Autoprefixer for CSS processing\n- **Replit integration** with development banner and cartographer plugin\n\n## Project Structure\n- **Monorepo structure** with separate client, server, and shared directories\n- **Shared schema** definitions between frontend and backend\n- **Component-based architecture** with reusable UI components\n- **Page-based routing** with dashboard and project detail views\n- **Asset management** with attached assets directory for static files\n\n# External Dependencies\n\n## Database and ORM\n- **Neon Database** serverless PostgreSQL for cloud database hosting\n- **Drizzle ORM** for type-safe database operations and migrations\n- **connect-pg-simple** for PostgreSQL session storage\n\n## UI and Styling\n- **Radix UI** primitives for accessible component foundations\n- **Tailwind CSS** for utility-first styling\n- **Lucide React** for consistent SVG icons\n- **class-variance-authority** for component variant management\n- **clsx** and **tailwind-merge** for conditional class name handling\n\n## Development and Build Tools\n- **Vite** for fast development server and build tooling\n- **TypeScript** for static type checking\n- **ESBuild** for fast JavaScript bundling\n- **TSX** for TypeScript execution in development\n\n## React Ecosystem\n- **React Hook Form** with Hookform Resolvers for form management\n- **TanStack React Query** for server state management\n- **Wouter** for lightweight client-side routing\n- **React Day Picker** for date selection components\n\n## Utilities and Helpers\n- **date-fns** for date manipulation and formatting\n- **nanoid** for unique ID generation\n- **cmdk** for command palette functionality\n- **embla-carousel-react** for carousel components","size_bytes":4010},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2782},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pipelines = pgTable(\"pipelines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull(), // 'Active' | 'Inactive'\n  agents: text(\"agents\").array().default([]), // AI agents enabled for this pipeline\n  trigger: text(\"trigger\").notNull(), // Trigger condition like \"push to main\"\n  lastRun: timestamp(\"last_run\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).pick({\n  name: true,\n  description: true,\n});\n\nexport const insertPipelineSchema = createInsertSchema(pipelines).pick({\n  projectId: true,\n  name: true,\n  status: true,\n  agents: true,\n  trigger: true,\n  lastRun: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\nexport type InsertPipeline = z.infer<typeof insertPipelineSchema>;\nexport type Pipeline = typeof pipelines.$inferSelect;\n\nexport type ProjectWithPipelines = Project & {\n  pipelines: Pipeline[];\n};\n","size_bytes":1991},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/language-context\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { DashboardStats } from \"@/pages/dashboard-stats\";\nimport { Projects } from \"@/pages/projects\";\nimport { AllPipelines } from \"@/pages/all-pipelines\";\nimport { Settings } from \"@/pages/settings\";\nimport { Help } from \"@/pages/help\";\nimport { ProjectDetail } from \"@/pages/project-detail\";\nimport { PipelineDetail } from \"@/pages/pipeline-detail\";\nimport { mockProjects } from \"@/data/mock-data\";\nimport type { ProjectWithPipelines, Pipeline } from \"@shared/schema\";\n\nfunction ProjectManagementApp() {\n  const [currentView, setCurrentView] = useState<'dashboard' | 'projects' | 'all-pipelines' | 'settings' | 'help' | 'project-detail' | 'pipeline-detail'>('dashboard');\n  const [selectedProject, setSelectedProject] = useState<ProjectWithPipelines | null>(null);\n  const [selectedPipeline, setSelectedPipeline] = useState<Pipeline | null>(null);\n  const [projects, setProjects] = useState<ProjectWithPipelines[]>(mockProjects);\n\n  const handleProjectSelect = (project: ProjectWithPipelines) => {\n    // Find the updated project data to ensure we have the latest pipelines\n    const updatedProject = projects.find(p => p.id === project.id) || project;\n    setSelectedProject(updatedProject);\n    setCurrentView('project-detail');\n  };\n\n  const handleNavigate = (view: 'dashboard' | 'projects' | 'all-pipelines' | 'settings' | 'help') => {\n    setCurrentView(view);\n    setSelectedProject(null);\n  };\n\n  const handleBackToProjects = () => {\n    setCurrentView('projects');\n    setSelectedProject(null);\n    setSelectedPipeline(null);\n  };\n\n  const handlePipelineDetails = (pipeline: Pipeline, project?: ProjectWithPipelines) => {\n    setSelectedPipeline(pipeline);\n    if (project) {\n      setSelectedProject(project);\n    }\n    setCurrentView('pipeline-detail');\n  };\n\n  const handleBackToPipelines = () => {\n    if (selectedProject) {\n      setCurrentView('project-detail');\n    } else {\n      setCurrentView('all-pipelines');\n    }\n    setSelectedPipeline(null);\n  };\n\n  const handlePipelineCreate = (projectId: string, pipelineData: {\n    name: string;\n    agents: string[];\n    trigger: string;\n  }) => {\n    const newPipeline: Pipeline = {\n      id: `pipeline-${Date.now()}`,\n      projectId,\n      name: pipelineData.name,\n      status: 'Active',\n      agents: pipelineData.agents,\n      trigger: pipelineData.trigger,\n      lastRun: null,\n      createdAt: new Date(),\n    };\n\n    setProjects(prev => prev.map(project => \n      project.id === projectId \n        ? { ...project, pipelines: [...project.pipelines, newPipeline] }\n        : project\n    ));\n\n    // Update selected project if it's the one we're adding to\n    if (selectedProject?.id === projectId) {\n      setSelectedProject(prev => prev ? {\n        ...prev,\n        pipelines: [...prev.pipelines, newPipeline]\n      } : null);\n    }\n  };\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'dashboard':\n        return <DashboardStats projects={projects} />;\n      case 'projects':\n        return <Projects projects={projects} onProjectSelect={handleProjectSelect} />;\n      case 'all-pipelines':\n        return <AllPipelines projects={projects} onPipelineDetails={handlePipelineDetails} />;\n      case 'settings':\n        return <Settings />;\n      case 'help':\n        return <Help />;\n      case 'project-detail':\n        return selectedProject ? (\n          <ProjectDetail \n            project={selectedProject} \n            onBack={handleBackToProjects}\n            onPipelineCreate={handlePipelineCreate}\n            onPipelineDetails={(pipeline) => handlePipelineDetails(pipeline, selectedProject)}\n          />\n        ) : null;\n      case 'pipeline-detail':\n        return selectedPipeline && selectedProject ? (\n          <PipelineDetail\n            pipeline={selectedPipeline}\n            project={selectedProject}\n            onBack={handleBackToPipelines}\n          />\n        ) : null;\n      default:\n        return <DashboardStats projects={projects} />;\n    }\n  };\n\n  return (\n    <LanguageProvider>\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex\">\n          <Sidebar \n            currentView={currentView}\n            onNavigate={handleNavigate}\n          />\n          <main className=\"flex-1 p-6\">\n            {renderCurrentView()}\n          </main>\n        </div>\n      </div>\n    </LanguageProvider>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ProjectManagementApp} />\n      <Route path=\"/projects\" component={ProjectManagementApp} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5249},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240 10% 6%);\n  --foreground: hsl(240 5% 96%);\n  --card: hsl(240 10% 9%);\n  --card-foreground: hsl(240 5% 90%);\n  --popover: hsl(240 10% 9%);\n  --popover-foreground: hsl(240 5% 90%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(240 5% 15%);\n  --secondary-foreground: hsl(240 5% 85%);\n  --muted: hsl(240 6% 12%);\n  --muted-foreground: hsl(240 5% 65%);\n  --accent: hsl(240 6% 15%);\n  --accent-foreground: hsl(240 5% 90%);\n  --destructive: hsl(0 62% 50%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(240 6% 20%);\n  --input: hsl(240 6% 20%);\n  --ring: hsl(217 91% 60%);\n  --sidebar: hsl(240 10% 9%);\n  --sidebar-foreground: hsl(240 5% 90%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(240 6% 15%);\n  --sidebar-accent-foreground: hsl(240 5% 90%);\n  --sidebar-border: hsl(240 6% 20%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 1px 2px -1px hsl(217 91% 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 2px 4px -1px hsl(217 91% 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 4px 6px -1px hsl(217 91% 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00), 0px 8px 10px -1px hsl(217 91% 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217 91% 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n\n  html {\n    color-scheme: dark;\n  }\n}\n\n@layer components {\n  .project-card {\n    transition: all 0.2s ease-in-out;\n  }\n  \n  .project-card:hover {\n    transform: translateY(-2px);\n  }\n  \n  .status-active {\n    background-color: hsl(142 76% 36%);\n    color: white;\n  }\n  \n  .status-inactive {\n    background-color: hsl(0 84% 60%);\n    color: white;\n  }\n}\n","size_bytes":2403},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/pipeline-row.tsx":{"content":"import { Play, Clock } from \"lucide-react\";\nimport type { Pipeline } from \"@shared/schema\";\n\ninterface PipelineRowProps {\n  pipeline: Pipeline;\n  onViewDetails?: (pipeline: Pipeline) => void;\n}\n\nexport function PipelineRow({ pipeline, onViewDetails }: PipelineRowProps) {\n  const formatLastRun = (date: Date | null) => {\n    if (!date) return \"Never\";\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <tr className=\"border-b border-border hover:bg-muted/50\" data-testid={`row-pipeline-${pipeline.id}`}>\n      <td className=\"py-4 px-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-1.5 bg-primary/10 rounded\">\n            <Play className=\"w-5 h-5 text-primary\" />\n          </div>\n          <span className=\"font-medium text-card-foreground\" data-testid={`text-pipeline-name-${pipeline.id}`}>\n            {pipeline.name}\n          </span>\n        </div>\n      </td>\n      <td className=\"py-4 px-6\">\n        <span \n          className={`px-2 py-1 rounded-full text-xs font-medium ${\n            pipeline.status === 'Active' ? 'status-active' : 'status-inactive'\n          }`}\n          data-testid={`status-pipeline-${pipeline.id}`}\n        >\n          {pipeline.status}\n        </span>\n      </td>\n      <td className=\"py-4 px-6 text-muted-foreground\">\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"w-4 h-4\" />\n          <span data-testid={`text-pipeline-lastrun-${pipeline.id}`}>\n            {formatLastRun(pipeline.lastRun)}\n          </span>\n        </div>\n      </td>\n      <td className=\"py-4 px-6\">\n        <button \n          className=\"text-primary hover:text-primary/80 text-sm font-medium\"\n          onClick={() => onViewDetails?.(pipeline)}\n          data-testid={`button-view-details-${pipeline.id}`}\n        >\n          View Details\n        </button>\n      </td>\n    </tr>\n  );\n}\n","size_bytes":2002},"client/src/components/project-card.tsx":{"content":"import { Folder } from \"lucide-react\";\nimport type { ProjectWithPipelines } from \"@shared/schema\";\n\ninterface ProjectCardProps {\n  project: ProjectWithPipelines;\n  onClick: (project: ProjectWithPipelines) => void;\n}\n\nexport function ProjectCard({ project, onClick }: ProjectCardProps) {\n  const activePipelines = project.pipelines.filter(p => p.status === 'Active').length;\n  \n  return (\n    <div \n      className=\"project-card bg-card border border-border rounded-lg p-6 cursor-pointer hover:border-primary/50\"\n      onClick={() => onClick(project)}\n      data-testid={`card-project-${project.id}`}\n    >\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\n            <Folder className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold text-card-foreground\" data-testid={`text-project-name-${project.id}`}>\n              {project.name}\n            </h3>\n          </div>\n        </div>\n      </div>\n      \n      <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\" data-testid={`text-project-description-${project.id}`}>\n        {project.description}\n      </p>\n      \n      <div className=\"flex items-center justify-between text-sm\">\n        <div className=\"flex items-center space-x-4\">\n          <span className=\"text-muted-foreground\">\n            Active pipelines: <span className=\"text-primary font-medium\" data-testid={`text-active-pipelines-${project.id}`}>{activePipelines}</span>\n          </span>\n        </div>\n        <div className=\"text-muted-foreground\" data-testid={`text-total-pipelines-${project.id}`}>\n          {project.pipelines.length} total\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1802},"client/src/contexts/language-context.tsx":{"content":"import { createContext, useContext, ReactNode } from 'react';\nimport { useLanguage } from '@/hooks/use-language';\nimport { getTranslation, type Language } from '@/lib/i18n';\n\ninterface LanguageContextValue {\n  language: Language;\n  setLanguage: (language: Language) => void;\n  t: (key: string, params?: Record<string, string | number>) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextValue | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const { language, setLanguage } = useLanguage();\n  \n  const t = (key: string, params?: Record<string, string | number>) => {\n    let translation = getTranslation(language, key);\n    \n    // Simple template replacement for parameters like {current}, {total}\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        translation = translation.replace(`{${key}}`, String(value));\n      });\n    }\n    \n    return translation;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useTranslation() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useTranslation must be used within a LanguageProvider');\n  }\n  return context;\n}","size_bytes":1314},"client/src/data/mock-data.ts":{"content":"import type { ProjectWithPipelines } from \"@shared/schema\";\n\nexport const mockProjects: ProjectWithPipelines[] = [\n  {\n    id: \"1\",\n    name: \"AI Review Platform\",\n    description: \"Core company product for automated code reviews with machine learning capabilities\",\n    createdAt: new Date(\"2024-01-01\"),\n    pipelines: [\n      { \n        id: \"101\", \n        projectId: \"1\",\n        name: \"Main Pipeline (main branch)\", \n        status: \"Active\",\n        agents: [\"code-review\", \"security-scan\", \"performance\"],\n        trigger: \"push to main\",\n        lastRun: new Date(\"2024-01-15T14:30:00\"),\n        createdAt: new Date(\"2024-01-01\")\n      },\n      { \n        id: \"102\", \n        projectId: \"1\",\n        name: \"Log Analysis (staging)\", \n        status: \"Inactive\",\n        agents: [\"log-analyzer\"],\n        trigger: \"push to staging\",\n        lastRun: new Date(\"2024-01-14T11:00:00\"),\n        createdAt: new Date(\"2024-01-01\")\n      },\n      { \n        id: \"103\", \n        projectId: \"1\",\n        name: \"Performance Testing\", \n        status: \"Active\",\n        agents: [\"performance\", \"load-test\"],\n        trigger: \"manual\",\n        lastRun: new Date(\"2024-01-15T09:15:00\"),\n        createdAt: new Date(\"2024-01-01\")\n      }\n    ]\n  },\n  {\n    id: \"2\",\n    name: \"E-commerce Analytics\",\n    description: \"Advanced analytics dashboard for tracking customer behavior and sales metrics\",\n    createdAt: new Date(\"2024-01-02\"),\n    pipelines: [\n      { \n        id: \"201\", \n        projectId: \"2\",\n        name: \"Daily Sales Report\", \n        status: \"Active\",\n        agents: [\"data-validation\", \"report-generator\"],\n        trigger: \"schedule daily\",\n        lastRun: new Date(\"2024-01-15T08:00:00\"),\n        createdAt: new Date(\"2024-01-02\")\n      },\n      { \n        id: \"202\", \n        projectId: \"2\",\n        name: \"Customer Segmentation\", \n        status: \"Active\",\n        agents: [\"ml-analyzer\", \"data-insights\"],\n        trigger: \"data change\",\n        lastRun: new Date(\"2024-01-15T12:45:00\"),\n        createdAt: new Date(\"2024-01-02\")\n      }\n    ]\n  },\n  {\n    id: \"3\",\n    name: \"Mobile App Backend\",\n    description: \"RESTful API service powering iOS and Android applications with real-time features\",\n    createdAt: new Date(\"2024-01-03\"),\n    pipelines: [\n      { \n        id: \"301\", \n        projectId: \"3\",\n        name: \"API Deployment\", \n        status: \"Active\",\n        agents: [\"api-test\", \"security-scan\"],\n        trigger: \"push to production\",\n        lastRun: new Date(\"2024-01-15T16:20:00\"),\n        createdAt: new Date(\"2024-01-03\")\n      },\n      { \n        id: \"302\", \n        projectId: \"3\",\n        name: \"Database Migration\", \n        status: \"Inactive\",\n        agents: [\"db-validator\"],\n        trigger: \"manual\",\n        lastRun: new Date(\"2024-01-13T14:30:00\"),\n        createdAt: new Date(\"2024-01-03\")\n      },\n      { \n        id: \"303\", \n        projectId: \"3\",\n        name: \"Push Notification Service\", \n        status: \"Active\",\n        agents: [\"notification-test\", \"performance\"],\n        trigger: \"push to main\",\n        lastRun: new Date(\"2024-01-15T13:10:00\"),\n        createdAt: new Date(\"2024-01-03\")\n      }\n    ]\n  },\n  {\n    id: \"4\",\n    name: \"Data Warehouse ETL\",\n    description: \"Extract, transform, and load processes for enterprise data warehouse infrastructure\",\n    createdAt: new Date(\"2024-01-04\"),\n    pipelines: [\n      { \n        id: \"401\", \n        projectId: \"4\",\n        name: \"Daily ETL Process\", \n        status: \"Active\",\n        agents: [\"data-validator\", \"etl-monitor\"],\n        trigger: \"schedule daily\",\n        lastRun: new Date(\"2024-01-15T02:00:00\"),\n        createdAt: new Date(\"2024-01-04\")\n      },\n      { \n        id: \"402\", \n        projectId: \"4\",\n        name: \"Weekly Data Cleanup\", \n        status: \"Inactive\",\n        agents: [\"data-cleaner\"],\n        trigger: \"schedule weekly\",\n        lastRun: new Date(\"2024-01-08T03:30:00\"),\n        createdAt: new Date(\"2024-01-04\")\n      }\n    ]\n  }\n];\n","size_bytes":3987},"client/src/hooks/use-language.ts":{"content":"import { useState, useEffect } from 'react';\nimport type { Language } from '@/lib/i18n';\n\nconst LANGUAGE_STORAGE_KEY = 'pipeline-manager-language';\n\nexport function useLanguage() {\n  const [language, setLanguage] = useState<Language>(() => {\n    const stored = localStorage.getItem(LANGUAGE_STORAGE_KEY);\n    return (stored === 'ru' || stored === 'en') ? stored : 'en';\n  });\n\n  useEffect(() => {\n    localStorage.setItem(LANGUAGE_STORAGE_KEY, language);\n  }, [language]);\n\n  return { language, setLanguage };\n}","size_bytes":511},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/i18n.ts":{"content":"export type Language = 'en' | 'ru';\n\nexport const translations = {\n  en: {\n    // Navigation\n    nav: {\n      dashboard: \"Dashboard\",\n      projects: \"Projects\",\n      allPipelines: \"All Pipelines\",\n      settings: \"Settings\",\n      help: \"Help & Support\"\n    },\n    \n    // Dashboard\n    dashboard: {\n      title: \"Dashboard\",\n      subtitle: \"Overview of your project and pipeline performance\",\n      totalProjects: \"Total Projects\",\n      activePipelines: \"Active Pipelines\",\n      codeLines: \"Lines of Code\",\n      bugsSolved: \"Bugs Solved\",\n      teamMembers: \"Team Members\",\n      avgRuntime: \"Avg Runtime\",\n      recentActivity: \"Recent Activity\",\n      projectPerformance: \"Project Performance\",\n      pipelineActivity: \"Pipeline Activity\",\n      lastWeek: \"Last 7 days\",\n      fromLastMonth: \"from last month\",\n      projects: \"Projects\",\n      pipelines: \"Pipelines\",\n      bugs: \"Bugs\",\n      runtime: \"Runtime\"\n    },\n    \n    // Projects\n    projects: {\n      title: \"Projects\",\n      subtitle: \"Manage your projects and pipelines\",\n      createProject: \"Create New Project\",\n      viewProject: \"View Project\",\n      noPipelines: \"No pipelines\",\n      pipeline: \"pipeline\",\n      pipelines: \"pipelines\"\n    },\n    \n    // Project Detail\n    projectDetail: {\n      backToProjects: \"Back to Projects\",\n      createPipeline: \"Create Pipeline\",\n      projectPipelines: \"Project Pipelines\",\n      noPipelinesMessage: \"No pipelines created yet. Create your first pipeline to get started with automated workflows.\",\n      status: \"Status\",\n      trigger: \"Trigger\",\n      lastRun: \"Last Run\",\n      actions: \"Actions\"\n    },\n    \n    // All Pipelines\n    allPipelines: {\n      title: \"All Pipelines\",\n      subtitle: \"Monitor and manage all pipelines across projects\",\n      searchPlaceholder: \"Search pipelines...\",\n      filterByProject: \"Filter by Project\",\n      allProjects: \"All Projects\",\n      project: \"Project\",\n      status: \"Status\",\n      trigger: \"Trigger\",\n      lastRun: \"Last Run\",\n      actions: \"Actions\",\n      viewDetails: \"View Details\",\n      allStatus: \"All Status\",\n      active: \"Active\",\n      inactive: \"Inactive\",\n      moreFilters: \"More Filters\",\n      noPipelinesFound: \"No pipelines found\",\n      createFirst: \"Create your first project to get started with pipelines\"\n    },\n    \n    // Pipeline Detail\n    pipelineDetail: {\n      backToPipelines: \"Back to Pipelines\",\n      configure: \"Configure\",\n      runPipeline: \"Run Pipeline\",\n      running: \"Running...\",\n      lastRun: \"Last Run\",\n      successRate: \"Success Rate\",\n      avgDuration: \"Avg Duration\",\n      totalRuns: \"Total Runs\",\n      never: \"Never\",\n      lastDays: \"Last 30 days\",\n      typicalRuntime: \"Typical runtime\",\n      allTime: \"All time\",\n      overview: \"Overview\",\n      history: \"Run History\",\n      agents: \"AI Agents\",\n      settings: \"Settings\",\n      pipelineOverview: \"Pipeline Overview\",\n      configuration: \"Configuration\",\n      recentPerformance: \"Recent Performance\",\n      runHistory: \"Run History\",\n      viewLogs: \"View Logs\",\n      report: \"Report\",\n      aiAgentsResults: \"AI Agents Results\",\n      noIssues: \"No issues\",\n      issuesFound: \"issues found\",\n      viewDetails: \"View Details\",\n      pipelineSettings: \"Pipeline Settings\",\n      pipelineName: \"Pipeline Name\",\n      triggerCondition: \"Trigger Condition\",\n      created: \"Created\",\n      enabledAgents: \"Enabled AI Agents\",\n      editPipeline: \"Edit Pipeline\"\n    },\n    \n    // Pipeline Wizard\n    wizard: {\n      createPipeline: \"Create Pipeline\",\n      stepOf: \"Step {current} of {total}\",\n      back: \"Back\",\n      next: \"Next\",\n      finish: \"Finish\",\n      cancel: \"Cancel\",\n      \n      // Step 1\n      pipelineBasics: \"Pipeline Basics\",\n      pipelineName: \"Pipeline Name\",\n      pipelineNamePlaceholder: \"Enter pipeline name\",\n      \n      // Step 2\n      selectAgents: \"Select AI Agents\",\n      chooseAgents: \"Choose the AI agents you want to include in this pipeline\",\n      codeReview: \"Code Review Agent\",\n      codeReviewDesc: \"Reviews code for quality, security, and best practices\",\n      securityScan: \"Security Scanner\",\n      securityScanDesc: \"Scans for security vulnerabilities and issues\",\n      testGenerator: \"Test Generator\",\n      testGeneratorDesc: \"Automatically generates unit and integration tests\",\n      documentation: \"Documentation Generator\",\n      documentationDesc: \"Creates and updates project documentation\",\n      \n      // Step 3\n      configureTriggers: \"Configure Triggers\",\n      whenToRun: \"When should this pipeline run?\",\n      pushToMain: \"Push to main branch\",\n      pullRequest: \"Pull request created\",\n      manual: \"Manual trigger only\",\n      scheduled: \"Scheduled run\",\n      \n      // Step 4\n      reviewAndFinish: \"Review and Finish\",\n      reviewSettings: \"Review your pipeline settings below\",\n      selectedAgents: \"Selected AI Agents\",\n      triggerCondition: \"Trigger Condition\",\n      pipelineCreated: \"Pipeline created successfully!\"\n    },\n    \n    // Help\n    help: {\n      title: \"Help & Support\",\n      subtitle: \"Get help and support for your questions\",\n      faq: \"Frequently Asked Questions\",\n      aiAssistant: \"AI Assistant\",\n      chatPlaceholder: \"Ask me anything about pipelines, projects, or platform features...\",\n      send: \"Send\",\n      \n      // FAQ items\n      faqItems: {\n        createPipeline: {\n          question: \"How do I create a new pipeline?\",\n          answer: \"Go to a project and click 'Create Pipeline'. Follow the 4-step wizard to configure your pipeline with AI agents and triggers.\"\n        },\n        configureTriggers: {\n          question: \"How do I configure pipeline triggers?\",\n          answer: \"In the pipeline wizard step 3, choose when your pipeline should run: on code pushes, pull requests, manually, or on a schedule.\"\n        },\n        aiAgents: {\n          question: \"What AI agents are available?\",\n          answer: \"We offer Code Review, Security Scanner, Test Generator, and Documentation Generator agents. Each agent specializes in different aspects of code quality.\"\n        },\n        viewResults: {\n          question: \"How do I view pipeline results?\",\n          answer: \"Click 'View Details' on any pipeline to see run history, AI agent results, and detailed logs of each execution.\"\n        }\n      }\n    },\n    \n    // Settings\n    settings: {\n      title: \"Settings\",\n      subtitle: \"Manage your company settings and preferences\",\n      company: \"Company\",\n      team: \"Team\", \n      security: \"Security\",\n      notifications: \"Notifications\",\n      language: \"Language\",\n      \n      // Company tab\n      companyInfo: \"Company Information\",\n      companyName: \"Company Name\",\n      website: \"Website\",\n      description: \"Description\",\n      descriptionPlaceholder: \"Leading technology company focused on innovative solutions.\",\n      saveChanges: \"Save Changes\",\n      \n      // Team tab\n      teamSettings: \"Team Settings\",\n      autoAddMembers: \"Auto-add team members to new projects\",\n      autoAddMembersDesc: \"Automatically give access to new projects for all team members\",\n      requireApproval: \"Require approval for new team members\",\n      requireApprovalDesc: \"Admin approval required before new members can join\",\n      \n      // Security tab\n      securitySettings: \"Security Settings\",\n      twoFactor: \"Two-factor authentication\",\n      twoFactorDesc: \"Require 2FA for all team members\",\n      sessionTimeout: \"Session timeout\",\n      sessionTimeoutDesc: \"Automatically log out inactive users after 8 hours\",\n      ipRestrictions: \"IP restrictions\",\n      ipRestrictionsDesc: \"Only allow access from company IP addresses\",\n      \n      // Notifications tab\n      notificationPreferences: \"Notification Preferences\",\n      pipelineFailures: \"Pipeline failure notifications\",\n      pipelineFailuresDesc: \"Get notified when pipelines fail\",\n      securityAlerts: \"Security alerts\",\n      securityAlertsDesc: \"Receive alerts for security issues\",\n      weeklyReports: \"Weekly reports\",\n      weeklyReportsDesc: \"Get weekly summary reports via email\",\n      \n      // Language settings\n      languageSettings: \"Language Settings\",\n      selectLanguage: \"Select Language\",\n      english: \"English\",\n      russian: \"Русский\",\n    },\n    \n    // Common\n    common: {\n      active: \"Active\",\n      inactive: \"Inactive\",\n      success: \"Success\",\n      failed: \"Failed\",\n      pending: \"Pending\",\n      running: \"Running\",\n      completed: \"Completed\",\n      cancelled: \"Cancelled\"\n    }\n  },\n  ru: {\n    // Navigation\n    nav: {\n      dashboard: \"Панель управления\",\n      projects: \"Проекты\",\n      allPipelines: \"Все пайплайны\",\n      settings: \"Настройки\",\n      help: \"Помощь и поддержка\"\n    },\n    \n    // Dashboard\n    dashboard: {\n      title: \"Панель управления\",\n      subtitle: \"Обзор производительности ваших проектов и пайплайнов\",\n      totalProjects: \"Всего проектов\",\n      activePipelines: \"Активные пайплайны\",\n      codeLines: \"Строк кода\",\n      bugsSolved: \"Исправлено багов\",\n      teamMembers: \"Участников команды\",\n      avgRuntime: \"Среднее время выполнения\",\n      recentActivity: \"Недавняя активность\",\n      projectPerformance: \"Производительность проектов\",\n      pipelineActivity: \"Активность пайплайнов\",\n      lastWeek: \"Последние 7 дней\",\n      fromLastMonth: \"с прошлого месяца\",\n      projects: \"Проекты\",\n      pipelines: \"Пайплайны\",\n      bugs: \"Баги\",\n      runtime: \"Время выполнения\"\n    },\n    \n    // Projects\n    projects: {\n      title: \"Проекты\",\n      subtitle: \"Управление вашими проектами и пайплайнами\",\n      createProject: \"Создать новый проект\",\n      viewProject: \"Просмотреть проект\",\n      noPipelines: \"Нет пайплайнов\",\n      pipeline: \"пайплайн\",\n      pipelines: \"пайплайнов\"\n    },\n    \n    // Project Detail\n    projectDetail: {\n      backToProjects: \"Назад к проектам\",\n      createPipeline: \"Создать пайплайн\",\n      projectPipelines: \"Пайплайны проекта\",\n      noPipelinesMessage: \"Пайплайны еще не созданы. Создайте свой первый пайплайн для автоматизации рабочих процессов.\",\n      status: \"Статус\",\n      trigger: \"Триггер\",\n      lastRun: \"Последний запуск\",\n      actions: \"Действия\"\n    },\n    \n    // All Pipelines\n    allPipelines: {\n      title: \"Все пайплайны\",\n      subtitle: \"Мониторинг и управление всеми пайплайнами проектов\",\n      searchPlaceholder: \"Поиск пайплайнов...\",\n      filterByProject: \"Фильтр по проекту\",\n      allProjects: \"Все проекты\",\n      project: \"Проект\",\n      status: \"Статус\",\n      trigger: \"Триггер\",\n      lastRun: \"Последний запуск\",\n      actions: \"Действия\",\n      viewDetails: \"Подробности\",\n      allStatus: \"Все статусы\",\n      active: \"Активный\",\n      inactive: \"Неактивный\",\n      moreFilters: \"Больше фильтров\",\n      noPipelinesFound: \"Пайплайны не найдены\",\n      createFirst: \"Создайте свой первый проект для работы с пайплайнами\"\n    },\n    \n    // Pipeline Detail\n    pipelineDetail: {\n      backToPipelines: \"Назад к пайплайнам\",\n      configure: \"Настроить\",\n      runPipeline: \"Запустить пайплайн\",\n      running: \"Выполняется...\",\n      lastRun: \"Последний запуск\",\n      successRate: \"Успешность\",\n      avgDuration: \"Средняя длительность\",\n      totalRuns: \"Всего запусков\",\n      never: \"Никогда\",\n      lastDays: \"Последние 30 дней\",\n      typicalRuntime: \"Обычное время выполнения\",\n      allTime: \"За все время\",\n      overview: \"Обзор\",\n      history: \"История запусков\",\n      agents: \"ИИ агенты\",\n      settings: \"Настройки\",\n      pipelineOverview: \"Обзор пайплайна\",\n      configuration: \"Конфигурация\",\n      recentPerformance: \"Недавняя производительность\",\n      runHistory: \"История запусков\",\n      viewLogs: \"Просмотр логов\",\n      report: \"Отчет\",\n      aiAgentsResults: \"Результаты ИИ агентов\",\n      noIssues: \"Проблем не найдено\",\n      issuesFound: \"найдено проблем\",\n      viewDetails: \"Подробности\",\n      pipelineSettings: \"Настройки пайплайна\",\n      pipelineName: \"Название пайплайна\",\n      triggerCondition: \"Условие триггера\",\n      created: \"Создан\",\n      enabledAgents: \"Включенные ИИ агенты\",\n      editPipeline: \"Редактировать пайплайн\"\n    },\n    \n    // Pipeline Wizard\n    wizard: {\n      createPipeline: \"Создать пайплайн\",\n      stepOf: \"Шаг {current} из {total}\",\n      back: \"Назад\",\n      next: \"Далее\",\n      finish: \"Завершить\",\n      cancel: \"Отмена\",\n      \n      // Step 1\n      pipelineBasics: \"Основы пайплайна\",\n      pipelineName: \"Название пайплайна\",\n      pipelineNamePlaceholder: \"Введите название пайплайна\",\n      \n      // Step 2\n      selectAgents: \"Выбор ИИ агентов\",\n      chooseAgents: \"Выберите ИИ агентов, которых хотите включить в этот пайплайн\",\n      codeReview: \"Агент проверки кода\",\n      codeReviewDesc: \"Проверяет код на качество, безопасность и лучшие практики\",\n      securityScan: \"Сканер безопасности\",\n      securityScanDesc: \"Сканирует уязвимости и проблемы безопасности\",\n      testGenerator: \"Генератор тестов\",\n      testGeneratorDesc: \"Автоматически генерирует модульные и интеграционные тесты\",\n      documentation: \"Генератор документации\",\n      documentationDesc: \"Создает и обновляет документацию проекта\",\n      \n      // Step 3\n      configureTriggers: \"Настройка триггеров\",\n      whenToRun: \"Когда должен запускаться этот пайплайн?\",\n      pushToMain: \"Пуш в основную ветку\",\n      pullRequest: \"Создание pull request\",\n      manual: \"Только ручной запуск\",\n      scheduled: \"Запуск по расписанию\",\n      \n      // Step 4\n      reviewAndFinish: \"Проверка и завершение\",\n      reviewSettings: \"Просмотрите настройки вашего пайплайна ниже\",\n      selectedAgents: \"Выбранные ИИ агенты\",\n      triggerCondition: \"Условие триггера\",\n      pipelineCreated: \"Пайплайн успешно создан!\"\n    },\n    \n    // Help\n    help: {\n      title: \"Помощь и поддержка\",\n      subtitle: \"Получите помощь и поддержку по вашим вопросам\",\n      faq: \"Часто задаваемые вопросы\",\n      aiAssistant: \"ИИ помощник\",\n      chatPlaceholder: \"Спросите меня о пайплайнах, проектах или возможностях платформы...\",\n      send: \"Отправить\",\n      \n      // FAQ items\n      faqItems: {\n        createPipeline: {\n          question: \"Как создать новый пайплайн?\",\n          answer: \"Перейдите в проект и нажмите 'Создать пайплайн'. Следуйте 4-шаговому мастеру для настройки пайплайна с ИИ агентами и триггерами.\"\n        },\n        configureTriggers: {\n          question: \"Как настроить триггеры пайплайна?\",\n          answer: \"На 3-м шаге мастера пайплайна выберите, когда должен запускаться ваш пайплайн: при пуше кода, pull request, вручную или по расписанию.\"\n        },\n        aiAgents: {\n          question: \"Какие ИИ агенты доступны?\",\n          answer: \"Мы предлагаем агентов проверки кода, сканера безопасности, генератора тестов и генератора документации. Каждый агент специализируется на разных аспектах качества кода.\"\n        },\n        viewResults: {\n          question: \"Как просмотреть результаты пайплайна?\",\n          answer: \"Нажмите 'Подробности' на любом пайплайне, чтобы увидеть историю запусков, результаты ИИ агентов и подробные логи каждого выполнения.\"\n        }\n      }\n    },\n    \n    // Settings\n    settings: {\n      title: \"Настройки\",\n      subtitle: \"Управление настройками компании и предпочтениями\",\n      company: \"Компания\",\n      team: \"Команда\",\n      security: \"Безопасность\", \n      notifications: \"Уведомления\",\n      language: \"Язык\",\n      \n      // Company tab\n      companyInfo: \"Информация о компании\",\n      companyName: \"Название компании\",\n      website: \"Веб-сайт\",\n      description: \"Описание\",\n      descriptionPlaceholder: \"Ведущая технологическая компания, специализирующаяся на инновационных решениях.\",\n      saveChanges: \"Сохранить изменения\",\n      \n      // Team tab\n      teamSettings: \"Настройки команды\",\n      autoAddMembers: \"Автоматически добавлять участников команды в новые проекты\",\n      autoAddMembersDesc: \"Автоматически предоставлять доступ к новым проектам всем участникам команды\",\n      requireApproval: \"Требовать одобрение для новых участников команды\",\n      requireApprovalDesc: \"Требуется одобрение администратора перед присоединением новых участников\",\n      \n      // Security tab\n      securitySettings: \"Настройки безопасности\",\n      twoFactor: \"Двухфакторная аутентификация\",\n      twoFactorDesc: \"Требовать 2FA для всех участников команды\",\n      sessionTimeout: \"Тайм-аут сессии\",\n      sessionTimeoutDesc: \"Автоматически выходить из системы неактивных пользователей через 8 часов\",\n      ipRestrictions: \"IP-ограничения\",\n      ipRestrictionsDesc: \"Разрешить доступ только с IP-адресов компании\",\n      \n      // Notifications tab\n      notificationPreferences: \"Настройки уведомлений\",\n      pipelineFailures: \"Уведомления о сбоях пайплайнов\",\n      pipelineFailuresDesc: \"Получать уведомления при сбое пайплайнов\",\n      securityAlerts: \"Оповещения безопасности\",\n      securityAlertsDesc: \"Получать оповещения о проблемах безопасности\",\n      weeklyReports: \"Еженедельные отчеты\",\n      weeklyReportsDesc: \"Получать еженедельные сводные отчеты по электронной почте\",\n      \n      // Language settings\n      languageSettings: \"Настройки языка\",\n      selectLanguage: \"Выберите язык\",\n      english: \"English\",\n      russian: \"Русский\",\n    },\n    \n    // Common\n    common: {\n      active: \"Активен\",\n      inactive: \"Неактивен\",\n      success: \"Успешно\",\n      failed: \"Ошибка\",\n      pending: \"Ожидание\",\n      running: \"Выполняется\",\n      completed: \"Завершено\",\n      cancelled: \"Отменено\"\n    }\n  }\n};\n\nexport function getTranslation(language: Language, key: string): string {\n  const keys = key.split('.');\n  let value: any = translations[language];\n  \n  for (const k of keys) {\n    value = value?.[k];\n  }\n  \n  return value || key;\n}","size_bytes":21409},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/all-pipelines.tsx":{"content":"import { Play, Search, Filter } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { ProjectWithPipelines, Pipeline } from \"@shared/schema\";\nimport { useTranslation } from \"@/contexts/language-context\";\n\ninterface AllPipelinesProps {\n  projects: ProjectWithPipelines[];\n  onPipelineDetails?: (pipeline: Pipeline, project: ProjectWithPipelines) => void;\n}\n\nexport function AllPipelines({ projects, onPipelineDetails }: AllPipelinesProps) {\n  const { t } = useTranslation();\n  const allPipelines = projects.flatMap(project => \n    project.pipelines.map(pipeline => ({\n      ...pipeline,\n      projectName: project.name,\n      project: project\n    }))\n  );\n\n  const formatLastRun = (date: Date | null) => {\n    if (!date) return t('pipelineDetail.never');\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-all-pipelines-title\">\n          {t('allPipelines.title')}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\" data-testid=\"text-all-pipelines-subtitle\">\n          {t('allPipelines.subtitle')}\n        </p>\n      </div>\n\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"relative flex-1 max-w-sm\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            type=\"search\"\n            placeholder={t('allPipelines.searchPlaceholder')}\n            className=\"pl-10\"\n            data-testid=\"input-search-pipelines\"\n          />\n        </div>\n        <Select>\n          <SelectTrigger className=\"w-40\" data-testid=\"select-filter-status\">\n            <SelectValue placeholder={t('allPipelines.filterByProject')} />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">{t('allPipelines.allStatus')}</SelectItem>\n            <SelectItem value=\"active\">{t('allPipelines.active')}</SelectItem>\n            <SelectItem value=\"inactive\">{t('allPipelines.inactive')}</SelectItem>\n          </SelectContent>\n        </Select>\n        <Button variant=\"outline\" data-testid=\"button-more-filters\">\n          <Filter className=\"w-4 h-4 mr-2\" />\n          {t('allPipelines.moreFilters')}\n        </Button>\n      </div>\n\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted/30\">\n              <tr>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">Pipeline</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">{t('allPipelines.project')}</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">{t('allPipelines.status')}</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">{t('allPipelines.trigger')}</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">{t('allPipelines.lastRun')}</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">{t('allPipelines.actions')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {allPipelines.map((pipeline) => (\n                <tr \n                  key={pipeline.id} \n                  className=\"border-b border-border hover:bg-muted/50\"\n                  data-testid={`row-pipeline-${pipeline.id}`}\n                >\n                  <td className=\"py-4 px-6\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"p-1.5 bg-primary/10 rounded\">\n                        <Play className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <span className=\"font-medium text-card-foreground\" data-testid={`text-pipeline-name-${pipeline.id}`}>\n                        {pipeline.name}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <span className=\"text-muted-foreground\" data-testid={`text-project-name-${pipeline.id}`}>\n                      {pipeline.projectName}\n                    </span>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <span \n                      className={`px-2 py-1 rounded-full text-xs font-medium ${\n                        pipeline.status === 'Active' ? 'status-active' : 'status-inactive'\n                      }`}\n                      data-testid={`status-pipeline-${pipeline.id}`}\n                    >\n                      {pipeline.status}\n                    </span>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <span className=\"text-muted-foreground text-sm\" data-testid={`text-trigger-${pipeline.id}`}>\n                      {pipeline.trigger}\n                    </span>\n                  </td>\n                  <td className=\"py-4 px-6 text-muted-foreground\">\n                    <span data-testid={`text-pipeline-lastrun-${pipeline.id}`}>\n                      {formatLastRun(pipeline.lastRun)}\n                    </span>\n                  </td>\n                  <td className=\"py-4 px-6\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => onPipelineDetails?.(pipeline, pipeline.project)}\n                      data-testid={`button-view-details-${pipeline.id}`}\n                    >\n                      {t('allPipelines.viewDetails')}\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {allPipelines.length === 0 && (\n          <div className=\"p-12 text-center\">\n            <div className=\"p-3 bg-muted/50 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n              <Play className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-card-foreground mb-2\" data-testid=\"text-no-pipelines-title\">\n              {t('allPipelines.noPipelinesFound')}\n            </h3>\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-pipelines-description\">\n              {t('allPipelines.createFirst')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6762},"client/src/pages/dashboard-stats.tsx":{"content":"import { TrendingUp, Activity, Code, Bug, Users, Clock } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { ProjectWithPipelines } from \"@shared/schema\";\nimport { useTranslation } from \"@/contexts/language-context\";\n\ninterface DashboardStatsProps {\n  projects: ProjectWithPipelines[];\n}\n\nexport function DashboardStats({ projects }: DashboardStatsProps) {\n  const { t } = useTranslation();\n  const totalProjects = projects.length;\n  const totalPipelines = projects.reduce((sum, project) => sum + project.pipelines.length, 0);\n  const activePipelines = projects.reduce((sum, project) => \n    sum + project.pipelines.filter(p => p.status === 'Active').length, 0\n  );\n  \n  // Mock statistics - in real app these would come from actual data\n  const stats = [\n    {\n      title: t('dashboard.totalProjects'),\n      value: totalProjects,\n      icon: <TrendingUp className=\"h-5 w-5\" />,\n      change: \"+12%\",\n      changeType: \"positive\" as const,\n    },\n    {\n      title: t('dashboard.activePipelines'),\n      value: activePipelines,\n      icon: <Activity className=\"h-5 w-5\" />,\n      change: \"+8%\",\n      changeType: \"positive\" as const,\n    },\n    {\n      title: t('dashboard.codeLines'),\n      value: \"2.4M\",\n      icon: <Code className=\"h-5 w-5\" />,\n      change: \"+15%\",\n      changeType: \"positive\" as const,\n    },\n    {\n      title: t('dashboard.bugsSolved'),\n      value: \"142\",\n      icon: <Bug className=\"h-5 w-5\" />,\n      change: \"-5%\",\n      changeType: \"negative\" as const,\n    },\n    {\n      title: t('dashboard.teamMembers'),\n      value: \"24\",\n      icon: <Users className=\"h-5 w-5\" />,\n      change: \"+2\",\n      changeType: \"positive\" as const,\n    },\n    {\n      title: t('dashboard.avgRuntime'),\n      value: \"3.2m\",\n      icon: <Clock className=\"h-5 w-5\" />,\n      change: \"-12%\",\n      changeType: \"positive\" as const,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">\n          {t('dashboard.title')}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\" data-testid=\"text-dashboard-subtitle\">\n          {t('dashboard.subtitle')}\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {stats.map((stat, index) => (\n          <Card key={index} data-testid={`card-stat-${index}`}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {stat.title}\n              </CardTitle>\n              <div className=\"text-muted-foreground\">\n                {stat.icon}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\" data-testid={`text-stat-value-${index}`}>\n                {stat.value}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                <span \n                  className={\n                    stat.changeType === 'positive' \n                      ? 'text-green-600' \n                      : 'text-red-600'\n                  }\n                  data-testid={`text-stat-change-${index}`}\n                >\n                  {stat.change}\n                </span>\n                {\" \"}{t('dashboard.fromLastMonth')}\n              </p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-recent-activity\">\n          <CardHeader>\n            <CardTitle>{t('dashboard.recentActivity')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {projects.slice(0, 3).map((project) => \n                project.pipelines.slice(0, 2).map((pipeline) => (\n                  <div \n                    key={pipeline.id} \n                    className=\"flex items-center justify-between border-b border-border pb-2 last:border-b-0\"\n                    data-testid={`activity-item-${pipeline.id}`}\n                  >\n                    <div>\n                      <p className=\"font-medium text-sm\">{pipeline.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{project.name}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <span \n                        className={`px-2 py-1 rounded-full text-xs ${\n                          pipeline.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                        }`}\n                      >\n                        {pipeline.status}\n                      </span>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-pipeline-performance\">\n          <CardHeader>\n            <CardTitle>{t('dashboard.projectPerformance')}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">{t('pipelineDetail.successRate')}</span>\n                <span className=\"font-medium\">94.2%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: '94.2%' }}></div>\n              </div>\n              \n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">{t('pipelineDetail.avgDuration')}</span>\n                <span className=\"font-medium\">3.2 minutes</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '68%' }}></div>\n              </div>\n              \n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Время в очереди</span>\n                <span className=\"font-medium\">12 seconds</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-yellow-600 h-2 rounded-full\" style={{ width: '25%' }}></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6611},"client/src/pages/dashboard.tsx":{"content":"import { Plus } from \"lucide-react\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport type { ProjectWithPipelines } from \"@shared/schema\";\n\ninterface DashboardProps {\n  projects: ProjectWithPipelines[];\n  onProjectSelect: (project: ProjectWithPipelines) => void;\n}\n\nexport function Dashboard({ projects, onProjectSelect }: DashboardProps) {\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">Projects</h1>\n          <p className=\"text-muted-foreground mt-1\" data-testid=\"text-dashboard-subtitle\">\n            Manage your projects and pipelines\n          </p>\n        </div>\n        <button \n          className=\"flex items-center space-x-2 bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg font-medium transition-colors\"\n          data-testid=\"button-create-project\"\n        >\n          <Plus className=\"w-5 h-5\" />\n          <span>Create Project</span>\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {projects.map(project => (\n          <ProjectCard \n            key={project.id} \n            project={project} \n            onClick={onProjectSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1378},"client/src/pages/help.tsx":{"content":"import { useState } from \"react\";\nimport { Send, MessageCircle, Search, ChevronDown, ChevronRight, Bot } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useTranslation } from \"@/contexts/language-context\";\n\nexport function Help() {\n  const { t } = useTranslation();\n  type ChatMessage = {\n    id: string;\n    type: \"bot\" | \"user\";\n    message: string;\n    timestamp: Date;\n  };\n\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: \"1\",\n      type: \"bot\",\n      message: \"Hello! I'm your AI assistant. How can I help you with your pipelines today?\",\n      timestamp: new Date(),\n    }\n  ]);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [expandedFaq, setExpandedFaq] = useState<string | null>(null);\n\n  const faqItems = [\n    {\n      id: \"1\",\n      question: \"How do I create a new pipeline?\",\n      answer: \"To create a new pipeline, navigate to your project page and click the 'Configure Pipeline' button. This will open a step-by-step wizard that guides you through naming your pipeline, selecting AI agents, and setting trigger conditions.\"\n    },\n    {\n      id: \"2\",\n      question: \"What AI agents are available?\",\n      answer: \"We offer several AI agents including Code Review (automated code quality analysis), Security Scanner (vulnerability detection), Performance Analyzer (bottleneck detection), Test Generator (automatic test creation), Documentation AI (auto-documentation), and API Validator (contract validation).\"\n    },\n    {\n      id: \"3\",\n      question: \"How do pipeline triggers work?\",\n      answer: \"Pipeline triggers determine when your pipeline runs automatically. You can set triggers for push events to specific branches (main, staging, production), pull request creation, scheduled runs (daily/weekly), or manual execution only.\"\n    },\n    {\n      id: \"4\",\n      question: \"Can I modify an existing pipeline?\",\n      answer: \"Yes, you can edit pipeline settings by going to the project detail page, finding your pipeline in the list, and clicking 'View Details'. From there you can modify the name, enabled agents, and trigger conditions.\"\n    },\n    {\n      id: \"5\",\n      question: \"How do I interpret pipeline results?\",\n      answer: \"Pipeline results show the status (Active/Inactive), last run time, and detailed reports from each AI agent. Green status indicates successful runs, while red indicates issues that need attention. Click 'View Details' for comprehensive reports.\"\n    },\n  ];\n\n  const handleSendMessage = () => {\n    if (!chatInput.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: \"user\",\n      message: chatInput,\n      timestamp: new Date(),\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n    setChatInput(\"\");\n\n    // Simulate AI response\n    setTimeout(() => {\n      const botResponse: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: \"bot\",\n        message: \"I understand your question. Let me help you with that. Could you provide more details about what specific aspect you'd like to know more about?\",\n        timestamp: new Date(),\n      };\n      setChatMessages(prev => [...prev, botResponse]);\n    }, 1000);\n  };\n\n  const toggleFaq = (id: string) => {\n    setExpandedFaq(expandedFaq === id ? null : id);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-help-title\">\n          {t('help.title')}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\" data-testid=\"text-help-subtitle\">\n          {t('help.subtitle')}\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"faq\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"faq\" data-testid=\"tab-faq\">\n            <Search className=\"w-4 h-4 mr-2\" />\n            {t('help.faq')}\n          </TabsTrigger>\n          <TabsTrigger value=\"chat\" data-testid=\"tab-chat\">\n            <MessageCircle className=\"w-4 h-4 mr-2\" />\n            {t('help.aiAssistant')}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"faq\" className=\"space-y-6\">\n          <Card data-testid=\"card-faq\">\n            <CardHeader>\n              <CardTitle>Frequently Asked Questions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {faqItems.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"border border-border rounded-lg\"\n                    data-testid={`faq-item-${item.id}`}\n                  >\n                    <button\n                      className=\"w-full p-4 text-left flex items-center justify-between hover:bg-muted/50 transition-colors\"\n                      onClick={() => toggleFaq(item.id)}\n                      data-testid={`faq-question-${item.id}`}\n                    >\n                      <span className=\"font-medium\">{item.question}</span>\n                      {expandedFaq === item.id ? (\n                        <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n                      ) : (\n                        <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n                      )}\n                    </button>\n                    {expandedFaq === item.id && (\n                      <div \n                        className=\"p-4 border-t border-border bg-muted/20\"\n                        data-testid={`faq-answer-${item.id}`}\n                      >\n                        <p className=\"text-muted-foreground\">{item.answer}</p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"chat\" className=\"space-y-6\">\n          <Card data-testid=\"card-ai-chat\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bot className=\"w-5 h-5 mr-2\" />\n                AI Assistant\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div \n                  className=\"h-96 border border-border rounded-lg p-4 overflow-y-auto space-y-4\"\n                  data-testid=\"chat-messages\"\n                >\n                  {chatMessages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                      data-testid={`chat-message-${message.id}`}\n                    >\n                      <div\n                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                          message.type === 'user'\n                            ? 'bg-primary text-primary-foreground'\n                            : 'bg-muted text-muted-foreground'\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.message}</p>\n                        <p className={`text-xs mt-1 ${\n                          message.type === 'user' ? 'text-primary-foreground/70' : 'text-muted-foreground/70'\n                        }`}>\n                          {message.timestamp.toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  <Textarea\n                    value={chatInput}\n                    onChange={(e) => setChatInput(e.target.value)}\n                    placeholder=\"Ask me anything about pipelines...\"\n                    className=\"min-h-[60px] resize-none\"\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && !e.shiftKey) {\n                        e.preventDefault();\n                        handleSendMessage();\n                      }\n                    }}\n                    data-testid=\"textarea-chat-input\"\n                  />\n                  <Button \n                    onClick={handleSendMessage}\n                    disabled={!chatInput.trim()}\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":8806},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pipeline-detail.tsx":{"content":"import { useState } from \"react\";\nimport { ArrowLeft, Play, Pause, Settings, Clock, CheckCircle, XCircle, AlertTriangle, Download, Eye } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport type { Pipeline, ProjectWithPipelines } from \"@shared/schema\";\n\ninterface PipelineDetailProps {\n  pipeline: Pipeline;\n  project: ProjectWithPipelines;\n  onBack: () => void;\n}\n\nexport function PipelineDetail({ pipeline, project, onBack }: PipelineDetailProps) {\n  const [isRunning, setIsRunning] = useState(false);\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return \"Never\";\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const mockRunHistory = [\n    {\n      id: \"run-1\",\n      status: \"success\",\n      startTime: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      endTime: new Date(Date.now() - 2 * 60 * 60 * 1000 + 3 * 60 * 1000),\n      duration: \"3m 24s\",\n      triggeredBy: \"push to main\",\n    },\n    {\n      id: \"run-2\", \n      status: \"failed\",\n      startTime: new Date(Date.now() - 6 * 60 * 60 * 1000),\n      endTime: new Date(Date.now() - 6 * 60 * 60 * 1000 + 1 * 60 * 1000),\n      duration: \"1m 15s\",\n      triggeredBy: \"manual\",\n    },\n    {\n      id: \"run-3\",\n      status: \"success\",\n      startTime: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      endTime: new Date(Date.now() - 24 * 60 * 60 * 1000 + 4 * 60 * 1000),\n      duration: \"4m 02s\", \n      triggeredBy: \"push to main\",\n    },\n  ];\n\n  const mockAgentResults = pipeline.agents?.map(agentId => ({\n    agentId,\n    name: agentId.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '),\n    status: Math.random() > 0.3 ? \"passed\" : \"failed\",\n    issues: Math.floor(Math.random() * 5),\n    duration: `${Math.floor(Math.random() * 60) + 10}s`,\n  })) || [];\n\n  const handleRunPipeline = () => {\n    setIsRunning(true);\n    setTimeout(() => setIsRunning(false), 3000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-4\">\n        <Button\n          variant=\"ghost\"\n          onClick={onBack}\n          className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground\"\n          data-testid=\"button-back-to-pipelines\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back to Pipelines</span>\n        </Button>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center space-x-3\">\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid={`text-pipeline-detail-name-${pipeline.id}`}>\n              {pipeline.name}\n            </h1>\n            <Badge \n              variant={pipeline.status === 'Active' ? 'default' : 'secondary'}\n              data-testid={`badge-pipeline-status-${pipeline.id}`}\n            >\n              {pipeline.status}\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\" data-testid={`text-pipeline-project-${pipeline.id}`}>\n            {project.name} • Trigger: {pipeline.trigger}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"outline\"\n            data-testid=\"button-configure-pipeline\"\n          >\n            <Settings className=\"w-4 h-4 mr-2\" />\n            Configure\n          </Button>\n          <Button \n            onClick={handleRunPipeline}\n            disabled={isRunning}\n            data-testid=\"button-run-pipeline\"\n          >\n            {isRunning ? (\n              <>\n                <div className=\"w-4 h-4 mr-2 border-2 border-primary-foreground/30 border-t-primary-foreground rounded-full animate-spin\" />\n                Running...\n              </>\n            ) : (\n              <>\n                <Play className=\"w-4 h-4 mr-2\" />\n                Run Pipeline\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card data-testid=\"card-last-run\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Last Run</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatDate(pipeline.lastRun)}</div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-success-rate\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Success Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">92%</div>\n            <div className=\"text-xs text-muted-foreground\">Last 30 days</div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-avg-duration\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Avg Duration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">3m 24s</div>\n            <div className=\"text-xs text-muted-foreground\">Typical runtime</div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-runs\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Runs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">247</div>\n            <div className=\"text-xs text-muted-foreground\">All time</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-history\">Run History</TabsTrigger>\n          <TabsTrigger value=\"agents\" data-testid=\"tab-agents\">AI Agents</TabsTrigger>\n          <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <Card data-testid=\"card-pipeline-overview\">\n            <CardHeader>\n              <CardTitle>Pipeline Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Configuration</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Trigger:</span>\n                      <span>{pipeline.trigger}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Status:</span>\n                      <span>{pipeline.status}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">AI Agents:</span>\n                      <span>{pipeline.agents?.length || 0}</span>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-2\">Recent Performance</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Success Rate</span>\n                      <span>92%</span>\n                    </div>\n                    <Progress value={92} className=\"h-2\" />\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Average Duration</span>\n                      <span>3m 24s</span>\n                    </div>\n                    <Progress value={68} className=\"h-2\" />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card data-testid=\"card-run-history\">\n            <CardHeader>\n              <CardTitle>Run History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockRunHistory.map((run) => (\n                  <div \n                    key={run.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                    data-testid={`run-history-item-${run.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {run.status === 'success' ? (\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        ) : (\n                          <XCircle className=\"w-5 h-5 text-red-600\" />\n                        )}\n                        <span className=\"font-medium capitalize\">{run.status}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {formatDate(run.startTime)} • {run.duration} • {run.triggeredBy}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-logs-${run.id}`}>\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View Logs\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-report-${run.id}`}>\n                        <Download className=\"w-4 h-4 mr-1\" />\n                        Report\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"agents\" className=\"space-y-6\">\n          <Card data-testid=\"card-ai-agents\">\n            <CardHeader>\n              <CardTitle>AI Agents Results</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockAgentResults.map((agent) => (\n                  <div \n                    key={agent.agentId}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                    data-testid={`agent-result-${agent.agentId}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {agent.status === 'passed' ? (\n                          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        ) : (\n                          <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n                        )}\n                        <span className=\"font-medium\">{agent.name}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {agent.issues > 0 ? `${agent.issues} issues found` : 'No issues'} • {agent.duration}\n                      </div>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-agent-details-${agent.agentId}`}>\n                      View Details\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card data-testid=\"card-pipeline-settings\">\n            <CardHeader>\n              <CardTitle>Pipeline Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Pipeline Name</label>\n                    <p className=\"text-muted-foreground\">{pipeline.name}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Trigger Condition</label>\n                    <p className=\"text-muted-foreground\">{pipeline.trigger}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Status</label>\n                    <p className=\"text-muted-foreground\">{pipeline.status}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Created</label>\n                    <p className=\"text-muted-foreground\">{formatDate(pipeline.createdAt)}</p>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Enabled AI Agents</label>\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {pipeline.agents?.map((agentId) => (\n                      <Badge key={agentId} variant=\"outline\" data-testid={`agent-badge-${agentId}`}>\n                        {agentId.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"pt-4\">\n                  <Button variant=\"outline\" data-testid=\"button-edit-pipeline\">\n                    Edit Pipeline\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":14193},"client/src/pages/project-detail.tsx":{"content":"import { ArrowLeft, Plus, Play } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { PipelineRow } from \"@/components/pipeline-row\";\nimport { PipelineWizard } from \"@/components/pipeline-wizard/pipeline-wizard\";\nimport type { ProjectWithPipelines, Pipeline } from \"@shared/schema\";\n\ninterface ProjectDetailProps {\n  project: ProjectWithPipelines;\n  onBack: () => void;\n  onPipelineCreate: (projectId: string, pipelineData: {\n    name: string;\n    agents: string[];\n    trigger: string;\n  }) => void;\n  onPipelineDetails?: (pipeline: Pipeline) => void;\n}\n\nexport function ProjectDetail({ project, onBack, onPipelineCreate, onPipelineDetails }: ProjectDetailProps) {\n  const [isWizardOpen, setIsWizardOpen] = useState(false);\n\n  const handlePipelineComplete = (pipelineData: {\n    name: string;\n    agents: string[];\n    trigger: string;\n  }) => {\n    onPipelineCreate(project.id, pipelineData);\n  };\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-4\">\n        <button \n          onClick={onBack}\n          className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors\"\n          data-testid=\"button-back-to-projects\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back to Projects</span>\n        </button>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid={`text-project-detail-name-${project.id}`}>\n            {project.name}\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl\" data-testid={`text-project-detail-description-${project.id}`}>\n            {project.description}\n          </p>\n        </div>\n        <button \n          className=\"flex items-center space-x-2 bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg font-medium transition-colors\"\n          onClick={() => setIsWizardOpen(true)}\n          data-testid=\"button-create-pipeline\"\n        >\n          <Plus className=\"w-5 h-5\" />\n          <span>Configure Pipeline</span>\n        </button>\n      </div>\n\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"px-6 py-4 border-b border-border\">\n          <h2 className=\"text-xl font-semibold text-card-foreground\" data-testid=\"text-pipelines-title\">\n            Pipelines\n          </h2>\n          <p className=\"text-muted-foreground text-sm mt-1\" data-testid=\"text-pipelines-subtitle\">\n            Manage and monitor your project pipelines\n          </p>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted/30\">\n              <tr>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">Pipeline</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">Status</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">Last Run</th>\n                <th className=\"text-left py-3 px-6 font-medium text-muted-foreground\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {project.pipelines.map(pipeline => (\n                <PipelineRow \n                  key={pipeline.id} \n                  pipeline={pipeline} \n                  onViewDetails={onPipelineDetails}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {project.pipelines.length === 0 && (\n          <div className=\"p-12 text-center\">\n            <div className=\"p-3 bg-muted/50 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n              <Play className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-card-foreground mb-2\" data-testid=\"text-no-pipelines-title\">\n              No pipelines yet\n            </h3>\n            <p className=\"text-muted-foreground mb-4\" data-testid=\"text-no-pipelines-description\">\n              Get started by creating your first pipeline\n            </p>\n            <button \n              className=\"bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg font-medium transition-colors\"\n              onClick={() => setIsWizardOpen(true)}\n              data-testid=\"button-create-first-pipeline\"\n            >\n              Configure Pipeline\n            </button>\n          </div>\n        )}\n      </div>\n\n      <PipelineWizard\n        project={project}\n        isOpen={isWizardOpen}\n        onClose={() => setIsWizardOpen(false)}\n        onComplete={handlePipelineComplete}\n      />\n    </div>\n  );\n}\n","size_bytes":4727},"client/src/pages/projects.tsx":{"content":"import { Plus } from \"lucide-react\";\nimport { ProjectCard } from \"@/components/project-card\";\nimport type { ProjectWithPipelines } from \"@shared/schema\";\nimport { useTranslation } from \"@/contexts/language-context\";\n\ninterface ProjectsProps {\n  projects: ProjectWithPipelines[];\n  onProjectSelect: (project: ProjectWithPipelines) => void;\n}\n\nexport function Projects({ projects, onProjectSelect }: ProjectsProps) {\n  const { t } = useTranslation();\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-projects-title\">{t('projects.title')}</h1>\n          <p className=\"text-muted-foreground mt-1\" data-testid=\"text-projects-subtitle\">\n            {t('projects.subtitle')}\n          </p>\n        </div>\n        <button \n          className=\"flex items-center space-x-2 bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-lg font-medium transition-colors\"\n          data-testid=\"button-create-project\"\n        >\n          <Plus className=\"w-5 h-5\" />\n          <span>{t('projects.createProject')}</span>\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {projects.map(project => (\n          <ProjectCard \n            key={project.id} \n            project={project} \n            onClick={onProjectSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":1486},"client/src/pages/settings.tsx":{"content":"import { Save, Building2, Users, Shield, Bell, Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useTranslation } from \"@/contexts/language-context\";\n\nexport function Settings() {\n  const { t, language, setLanguage } = useTranslation();\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-settings-title\">\n          {t('settings.title')}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\" data-testid=\"text-settings-subtitle\">\n          {t('settings.subtitle')}\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"company\" data-testid=\"tab-company\">\n            <Building2 className=\"w-4 h-4 mr-2\" />\n            {t('settings.company')}\n          </TabsTrigger>\n          <TabsTrigger value=\"team\" data-testid=\"tab-team\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            {t('settings.team')}\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n            <Shield className=\"w-4 h-4 mr-2\" />\n            {t('settings.security')}\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n            <Bell className=\"w-4 h-4 mr-2\" />\n            {t('settings.notifications')}\n          </TabsTrigger>\n          <TabsTrigger value=\"language\" data-testid=\"tab-language\">\n            <Globe className=\"w-4 h-4 mr-2\" />\n            {t('settings.language')}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"company\" className=\"space-y-6\">\n          <Card data-testid=\"card-company-info\">\n            <CardHeader>\n              <CardTitle>{t('settings.companyInfo')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company-name\">{t('settings.companyName')}</Label>\n                  <Input\n                    id=\"company-name\"\n                    defaultValue=\"Acme Corporation\"\n                    data-testid=\"input-company-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company-website\">{t('settings.website')}</Label>\n                  <Input\n                    id=\"company-website\"\n                    defaultValue=\"https://acme.com\"\n                    data-testid=\"input-company-website\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"company-description\">{t('settings.description')}</Label>\n                <Textarea\n                  id=\"company-description\"\n                  placeholder={t('settings.descriptionPlaceholder')}\n                  defaultValue={language === 'ru' ? 'Ведущая технологическая компания, специализирующаяся на инновационных решениях.' : 'Leading technology company focused on innovative solutions.'}\n                  data-testid=\"textarea-company-description\"\n                />\n              </div>\n              <Button data-testid=\"button-save-company\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                {t('settings.saveChanges')}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"team\" className=\"space-y-6\">\n          <Card data-testid=\"card-team-settings\">\n            <CardHeader>\n              <CardTitle>{t('settings.teamSettings')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.autoAddMembers')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.autoAddMembersDesc')}\n                  </p>\n                </div>\n                <Switch data-testid=\"switch-auto-add-members\" />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.requireApproval')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.requireApprovalDesc')}\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-require-approval\" />\n              </div>\n              <Button data-testid=\"button-save-team\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                {t('settings.saveChanges')}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card data-testid=\"card-security-settings\">\n            <CardHeader>\n              <CardTitle>{t('settings.securitySettings')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.twoFactor')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.twoFactorDesc')}\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-2fa\" />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.sessionTimeout')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.sessionTimeoutDesc')}\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-session-timeout\" />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.ipRestrictions')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.ipRestrictionsDesc')}\n                  </p>\n                </div>\n                <Switch data-testid=\"switch-ip-restrictions\" />\n              </div>\n              <Button data-testid=\"button-save-security\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                {t('settings.saveChanges')}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card data-testid=\"card-notification-settings\">\n            <CardHeader>\n              <CardTitle>{t('settings.notificationPreferences')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.pipelineFailures')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.pipelineFailuresDesc')}\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-pipeline-failures\" />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.securityAlerts')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.securityAlertsDesc')}\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-security-alerts\" />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label>{t('settings.weeklyReports')}</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {t('settings.weeklyReportsDesc')}\n                  </p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-weekly-reports\" />\n              </div>\n              <Button data-testid=\"button-save-notifications\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                {t('settings.saveChanges')}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"language\" className=\"space-y-6\">\n          <Card data-testid=\"card-language-settings\">\n            <CardHeader>\n              <CardTitle>{t('settings.languageSettings')}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>{t('settings.selectLanguage')}</Label>\n                <Select value={language} onValueChange={setLanguage}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-language\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"en\">{t('settings.english')}</SelectItem>\n                    <SelectItem value=\"ru\">{t('settings.russian')}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button data-testid=\"button-save-language\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                {t('settings.saveChanges')}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10081},"client/src/components/layout/header.tsx":{"content":"import { Bell, Search, Settings, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Header() {\n  return (\n    <header className=\"border-b border-border bg-card/50 backdrop-blur supports-[backdrop-filter]:bg-card/50\">\n      <div className=\"flex h-16 items-center px-6\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-8 w-8 bg-primary rounded-lg flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-sm\">P</span>\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"text-app-title\">\n              Pipeline Manager\n            </h1>\n          </div>\n        </div>\n\n        <div className=\"flex flex-1 items-center justify-center px-6\">\n          <div className=\"w-full max-w-sm\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <input\n                type=\"search\"\n                placeholder=\"Search projects...\"\n                className=\"w-full pl-10 pr-4 py-2 bg-background border border-border rounded-lg text-sm text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary/20\"\n                data-testid=\"input-search-projects\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n            <Bell className=\"h-5 w-5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-settings\">\n            <Settings className=\"h-5 w-5\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-user-profile\">\n            <User className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2012},"client/src/components/layout/sidebar.tsx":{"content":"import { Home, FolderOpen, Activity, Settings, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"@/contexts/language-context\";\n\ninterface SidebarProps {\n  currentView: 'dashboard' | 'projects' | 'all-pipelines' | 'settings' | 'help' | 'project-detail' | 'pipeline-detail';\n  onNavigate: (view: 'dashboard' | 'projects' | 'all-pipelines' | 'settings' | 'help') => void;\n}\n\nexport function Sidebar({ currentView, onNavigate }: SidebarProps) {\n  const { t } = useTranslation();\n  return (\n    <aside className=\"w-64 border-r border-border bg-card/30 backdrop-blur supports-[backdrop-filter]:bg-card/30\">\n      <div className=\"flex flex-col h-full\">\n        <nav className=\"flex-1 px-4 py-6 space-y-2\">\n          <Button\n            variant={currentView === 'dashboard' ? 'secondary' : 'ghost'}\n            className=\"w-full justify-start\"\n            onClick={() => onNavigate('dashboard')}\n            data-testid=\"nav-dashboard\"\n          >\n            <Home className=\"mr-3 h-5 w-5\" />\n            {t('nav.dashboard')}\n          </Button>\n          \n          <Button \n            variant={currentView === 'projects' || currentView === 'project-detail' || currentView === 'pipeline-detail' ? 'secondary' : 'ghost'}\n            className=\"w-full justify-start\" \n            onClick={() => onNavigate('projects')}\n            data-testid=\"nav-projects\"\n          >\n            <FolderOpen className=\"mr-3 h-5 w-5\" />\n            {t('nav.projects')}\n          </Button>\n          \n          <Button \n            variant={currentView === 'all-pipelines' ? 'secondary' : 'ghost'}\n            className=\"w-full justify-start\" \n            onClick={() => onNavigate('all-pipelines')}\n            data-testid=\"nav-pipelines\"\n          >\n            <Activity className=\"mr-3 h-5 w-5\" />\n            {t('nav.allPipelines')}\n          </Button>\n          \n          <div className=\"pt-4 mt-4 border-t border-border\">\n            <Button \n              variant={currentView === 'settings' ? 'secondary' : 'ghost'}\n              className=\"w-full justify-start\" \n              onClick={() => onNavigate('settings')}\n              data-testid=\"nav-settings\"\n            >\n              <Settings className=\"mr-3 h-5 w-5\" />\n              {t('nav.settings')}\n            </Button>\n            \n            <Button \n              variant={currentView === 'help' ? 'secondary' : 'ghost'}\n              className=\"w-full justify-start\" \n              onClick={() => onNavigate('help')}\n              data-testid=\"nav-help\"\n            >\n              <HelpCircle className=\"mr-3 h-5 w-5\" />\n              {t('nav.help')}\n            </Button>\n          </div>\n        </nav>\n      </div>\n    </aside>\n  );\n}","size_bytes":2755},"client/src/components/pipeline-wizard/pipeline-wizard.tsx":{"content":"import { useState } from \"react\";\nimport { X, ChevronLeft, ChevronRight, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { ProjectWithPipelines } from \"@shared/schema\";\n\ninterface PipelineWizardProps {\n  project: ProjectWithPipelines;\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (pipelineData: {\n    name: string;\n    agents: string[];\n    trigger: string;\n  }) => void;\n}\n\nconst AI_AGENTS = [\n  { id: \"code-review\", name: \"Code Review\", description: \"Automated code quality analysis\" },\n  { id: \"security-scan\", name: \"Security Scanner\", description: \"Vulnerability detection and security checks\" },\n  { id: \"performance\", name: \"Performance Analyzer\", description: \"Performance bottleneck detection\" },\n  { id: \"test-generator\", name: \"Test Generator\", description: \"Automatic test case generation\" },\n  { id: \"documentation\", name: \"Documentation AI\", description: \"Auto-generate and update documentation\" },\n  { id: \"api-validator\", name: \"API Validator\", description: \"API contract and schema validation\" },\n];\n\nconst TRIGGER_OPTIONS = [\n  { value: \"push to main\", label: \"Push to main branch\" },\n  { value: \"push to staging\", label: \"Push to staging branch\" },\n  { value: \"push to production\", label: \"Push to production branch\" },\n  { value: \"pull request\", label: \"Pull request created\" },\n  { value: \"schedule daily\", label: \"Daily schedule\" },\n  { value: \"schedule weekly\", label: \"Weekly schedule\" },\n  { value: \"manual\", label: \"Manual trigger only\" },\n];\n\nexport function PipelineWizard({ project, isOpen, onClose, onComplete }: PipelineWizardProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [pipelineName, setPipelineName] = useState(\"\");\n  const [selectedAgents, setSelectedAgents] = useState<string[]>([]);\n  const [selectedTrigger, setSelectedTrigger] = useState(\"\");\n\n  const handleAgentToggle = (agentId: string) => {\n    setSelectedAgents(prev => \n      prev.includes(agentId) \n        ? prev.filter(id => id !== agentId)\n        : [...prev, agentId]\n    );\n  };\n\n  const handleNext = () => {\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = () => {\n    onComplete({\n      name: pipelineName,\n      agents: selectedAgents,\n      trigger: selectedTrigger,\n    });\n    // Reset form\n    setCurrentStep(1);\n    setPipelineName(\"\");\n    setSelectedAgents([]);\n    setSelectedTrigger(\"\");\n    onClose();\n  };\n\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 1: return pipelineName.trim().length > 0;\n      case 2: return selectedAgents.length > 0;\n      case 3: return selectedTrigger.length > 0;\n      case 4: return true;\n      default: return false;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-pipeline-wizard\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle data-testid=\"text-wizard-title\">\n              Configure Pipeline for {project.name}\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              data-testid=\"button-close-wizard\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"py-6\">\n          {/* Progress indicator */}\n          <div className=\"flex items-center justify-center mb-8\">\n            {[1, 2, 3, 4].map((step) => (\n              <div key={step} className=\"flex items-center\">\n                <div\n                  className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium ${\n                    step <= currentStep\n                      ? 'bg-primary text-primary-foreground'\n                      : 'bg-muted text-muted-foreground'\n                  }`}\n                  data-testid={`step-indicator-${step}`}\n                >\n                  {step < currentStep ? <Check className=\"w-5 h-5\" /> : step}\n                </div>\n                {step < 4 && (\n                  <div\n                    className={`w-16 h-1 mx-2 ${\n                      step < currentStep ? 'bg-primary' : 'bg-muted'\n                    }`}\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Step 1: Pipeline Name */}\n          {currentStep === 1 && (\n            <div className=\"space-y-6\" data-testid=\"step-pipeline-name\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Step 1: Pipeline Name</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Enter a descriptive name for your new pipeline\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pipeline-name\">Pipeline Name</Label>\n                <Input\n                  id=\"pipeline-name\"\n                  value={pipelineName}\n                  onChange={(e) => setPipelineName(e.target.value)}\n                  placeholder=\"e.g., Main Code Review Pipeline\"\n                  data-testid=\"input-pipeline-name\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: AI Agents */}\n          {currentStep === 2 && (\n            <div className=\"space-y-6\" data-testid=\"step-ai-agents\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Step 2: AI Agents</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Select the AI agents you want to include in this pipeline\n                </p>\n              </div>\n              <div className=\"grid grid-cols-1 gap-4\">\n                {AI_AGENTS.map((agent) => (\n                  <div\n                    key={agent.id}\n                    className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                    data-testid={`agent-option-${agent.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">{agent.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{agent.description}</p>\n                    </div>\n                    <Switch\n                      checked={selectedAgents.includes(agent.id)}\n                      onCheckedChange={() => handleAgentToggle(agent.id)}\n                      data-testid={`switch-agent-${agent.id}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Trigger */}\n          {currentStep === 3 && (\n            <div className=\"space-y-6\" data-testid=\"step-trigger\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Step 3: Trigger Condition</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Choose when this pipeline should automatically run\n                </p>\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Trigger Condition</Label>\n                <Select value={selectedTrigger} onValueChange={setSelectedTrigger}>\n                  <SelectTrigger data-testid=\"select-trigger\">\n                    <SelectValue placeholder=\"Select trigger condition\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {TRIGGER_OPTIONS.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n\n          {/* Step 4: Summary */}\n          {currentStep === 4 && (\n            <div className=\"space-y-6\" data-testid=\"step-summary\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Step 4: Review & Confirm</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Please review your pipeline configuration\n                </p>\n              </div>\n              <div className=\"space-y-4 p-4 bg-muted/30 rounded-lg\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Pipeline Name</Label>\n                  <p className=\"text-foreground\" data-testid=\"summary-pipeline-name\">{pipelineName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Selected AI Agents ({selectedAgents.length})</Label>\n                  <div className=\"flex flex-wrap gap-2 mt-1\">\n                    {selectedAgents.map((agentId) => {\n                      const agent = AI_AGENTS.find(a => a.id === agentId);\n                      return (\n                        <span\n                          key={agentId}\n                          className=\"px-2 py-1 bg-primary/10 text-primary text-xs rounded-full\"\n                          data-testid={`summary-agent-${agentId}`}\n                        >\n                          {agent?.name}\n                        </span>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Trigger Condition</Label>\n                  <p className=\"text-foreground\" data-testid=\"summary-trigger\">\n                    {TRIGGER_OPTIONS.find(opt => opt.value === selectedTrigger)?.label}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Navigation buttons */}\n          <div className=\"flex justify-between mt-8\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevious}\n              disabled={currentStep === 1}\n              data-testid=\"button-previous-step\"\n            >\n              <ChevronLeft className=\"w-4 h-4 mr-1\" />\n              Previous\n            </Button>\n            \n            {currentStep < 4 ? (\n              <Button\n                onClick={handleNext}\n                disabled={!isStepValid()}\n                data-testid=\"button-next-step\"\n              >\n                Next\n                <ChevronRight className=\"w-4 h-4 ml-1\" />\n              </Button>\n            ) : (\n              <Button\n                onClick={handleComplete}\n                className=\"bg-green-600 hover:bg-green-700\"\n                data-testid=\"button-save-activate\"\n              >\n                Save & Activate\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11141},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}